"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsonwebtoken_1 = require("jsonwebtoken");
var web_api_1 = require("@slack/web-api");
var errors_1 = require("./errors");
var url_1 = require("url");
var logger_1 = require("./logger");
/**
 * InstallProvider Class.
 * @param clientId - Your apps client ID
 * @param clientSecret - Your apps client Secret
 * @param stateSecret - Used to sign and verify the generated state when using the built-in `stateStore`
 * @param stateStore - Replacement function for the built-in `stateStore`
 * @param installationStore - Interface to store and retrieve installation data from the database
 * @param authVersion - Can be either `v1` or `v2`. Determines which slack Oauth URL and method to use
 * @param logger - Pass in your own Logger if you don't want to use the built-in one
 * @param logLevel - Pass in the log level you want (ERROR, WARN, INFO, DEBUG). Default is INFO
 */
var InstallProvider = /** @class */ (function () {
    function InstallProvider(_a) {
        var clientId = _a.clientId, clientSecret = _a.clientSecret, _b = _a.stateSecret, stateSecret = _b === void 0 ? undefined : _b, _c = _a.stateStore, stateStore = _c === void 0 ? undefined : _c, _d = _a.installationStore, installationStore = _d === void 0 ? new MemoryInstallationStore() : _d, _e = _a.authVersion, authVersion = _e === void 0 ? 'v2' : _e, _f = _a.logger, logger = _f === void 0 ? undefined : _f, _g = _a.logLevel, logLevel = _g === void 0 ? logger_1.LogLevel.INFO : _g, _h = _a.clientOptions, clientOptions = _h === void 0 ? {} : _h, _j = _a.authorizationUrl, authorizationUrl = _j === void 0 ? 'https://slack.com/oauth/v2/authorize' : _j;
        if (clientId === undefined || clientSecret === undefined) {
            throw new errors_1.InstallerInitializationError('You must provide a valid clientId and clientSecret');
        }
        // Setup the logger
        if (typeof logger !== 'undefined') {
            this.logger = logger;
            if (typeof logLevel !== 'undefined') {
                this.logger.debug('The logLevel given to OAuth was ignored as you also gave logger');
            }
        }
        else {
            this.logger = logger_1.getLogger('OAuth:InstallProvider', logLevel, logger);
        }
        // Setup stateStore
        if (stateStore !== undefined) {
            this.stateStore = stateStore;
        }
        else if (stateSecret === undefined) {
            throw new errors_1.InstallerInitializationError('You must provide a State Secret to use the built-in state store');
        }
        else {
            this.stateStore = new ClearStateStore(stateSecret);
        }
        this.installationStore = installationStore;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.handleCallback = this.handleCallback.bind(this);
        this.authorize = this.authorize.bind(this);
        this.authVersion = authVersion;
        this.authorizationUrl = authorizationUrl;
        if (authorizationUrl !== 'https://slack.com/oauth/v2/authorize' && authVersion === 'v1') {
            this.logger.info('You provided both an authorizationUrl and an authVersion! The authVersion will be ignored in favor of the authorizationUrl.');
        }
        else if (authVersion === 'v1') {
            this.authorizationUrl = 'https://slack.com/oauth/authorize';
        }
        this.clientOptions = __assign({ logLevel: this.logger.getLevel() }, clientOptions);
    }
    /**
     * Fetches data from the installationStore.
     */
    InstallProvider.prototype.authorize = function (source) {
        return __awaiter(this, void 0, void 0, function () {
            var queryResult, authResult, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.installationStore.fetchInstallation(source, this.logger)];
                    case 1:
                        queryResult = _a.sent();
                        if (queryResult === undefined) {
                            throw new Error('Failed fetching data from the Installation Store');
                        }
                        authResult = {};
                        authResult.userToken = queryResult.user.token;
                        if (queryResult.bot !== undefined) {
                            authResult.botToken = queryResult.bot.token;
                            authResult.botId = queryResult.bot.id;
                            authResult.botUserId = queryResult.bot.userId;
                        }
                        return [2 /*return*/, authResult];
                    case 2:
                        error_1 = _a.sent();
                        throw new errors_1.AuthorizationError(error_1.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a URL that is suitable for including in an Add to Slack button
     * Uses stateStore to generate a value for the state query param.
     */
    InstallProvider.prototype.generateInstallUrl = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var slackURL, scopes, params, state, userScopes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        slackURL = new url_1.URL(this.authorizationUrl);
                        if (options.scopes === undefined) {
                            throw new errors_1.GenerateInstallUrlError('You must provide a scope parameter when calling generateInstallUrl');
                        }
                        if (options.scopes instanceof Array) {
                            scopes = options.scopes.join(',');
                        }
                        else {
                            scopes = options.scopes;
                        }
                        params = new url_1.URLSearchParams("scope=" + scopes);
                        return [4 /*yield*/, this.stateStore.generateStateParam(options, new Date())];
                    case 1:
                        state = _a.sent();
                        params.append('state', state);
                        // client id
                        params.append('client_id', this.clientId);
                        // redirect uri
                        if (options.redirectUri !== undefined) {
                            params.append('redirect_uri', options.redirectUri);
                        }
                        // team id
                        if (options.teamId !== undefined) {
                            params.append('team', options.teamId);
                        }
                        // user scope, only available for OAuth v2
                        if (options.userScopes !== undefined && this.authVersion === 'v2') {
                            userScopes = void 0;
                            if (options.userScopes instanceof Array) {
                                userScopes = options.userScopes.join(',');
                            }
                            else {
                                userScopes = options.userScopes;
                            }
                            params.append('user_scope', userScopes);
                        }
                        slackURL.search = params.toString();
                        return [2 /*return*/, slackURL.toString()];
                }
            });
        });
    };
    /**
     * This method handles the incoming request to the callback URL.
     * It can be used as a RequestListener in almost any HTTP server
     * framework.
     *
     * Verifies the state using the stateStore, exchanges the grant in the
     * query params for an access token, and stores token and associated data
     * in the installationStore.
     */
    InstallProvider.prototype.handleCallback = function (req, res, options) {
        return __awaiter(this, void 0, void 0, function () {
            var parsedUrl, code, state, installOptions, client, resp, installation, botId, botId, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 10, , 11]);
                        if (req.url !== undefined) {
                            parsedUrl = url_1.parse(req.url, true);
                            code = parsedUrl.query.code;
                            state = parsedUrl.query.state;
                            if (state === undefined || state === '' || code === undefined) {
                                throw new errors_1.MissingStateError('redirect url is missing state or code query parameters');
                            }
                        }
                        else {
                            throw new errors_1.UnknownError('Something went wrong');
                        }
                        return [4 /*yield*/, this.stateStore.verifyStateParam(new Date(), state)];
                    case 1:
                        installOptions = _a.sent();
                        client = new web_api_1.WebClient('', this.clientOptions);
                        resp = void 0;
                        installation = void 0;
                        if (!(this.authVersion === 'v1')) return [3 /*break*/, 5];
                        return [4 /*yield*/, client.oauth.access({
                                code: code,
                                client_id: this.clientId,
                                client_secret: this.clientSecret,
                                redirect_uri: installOptions.redirectUri,
                            })];
                    case 2:
                        // convert response type from WebApiCallResult to OAuthResponse
                        resp = (_a.sent());
                        // resp obj for v1 - https://api.slack.com/methods/oauth.access#response
                        installation = {
                            team: { id: resp.team_id, name: resp.team_name },
                            appId: resp.app_id,
                            user: {
                                token: resp.access_token,
                                scopes: resp.scope.split(','),
                                id: resp.user_id !== undefined ? resp.user_id : '',
                            },
                        };
                        if (!(resp.bot !== undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, getBotId(resp.bot.bot_access_token, this.clientOptions)];
                    case 3:
                        botId = _a.sent();
                        installation.bot = {
                            id: botId,
                            scopes: ['bot'],
                            token: resp.bot.bot_access_token,
                            userId: resp.bot.bot_user_id,
                        };
                        _a.label = 4;
                    case 4:
                        if (resp.enterprise_id !== null) {
                            installation.enterprise = {
                                id: resp.enterprise_id,
                            };
                        }
                        return [3 /*break*/, 8];
                    case 5: return [4 /*yield*/, client.oauth.v2.access({
                            code: code,
                            client_id: this.clientId,
                            client_secret: this.clientSecret,
                            redirect_uri: installOptions.redirectUri,
                        })];
                    case 6:
                        // convert response type from WebApiCallResult to OAuthResponse
                        resp = (_a.sent());
                        return [4 /*yield*/, getBotId(resp.access_token, this.clientOptions)];
                    case 7:
                        botId = _a.sent();
                        // resp obj for v2 - https://api.slack.com/methods/oauth.v2.access#response
                        installation = {
                            team: resp.team,
                            appId: resp.app_id,
                            user: {
                                token: resp.authed_user.access_token,
                                scopes: resp.authed_user.scope !== undefined ? resp.authed_user.scope.split(',') : undefined,
                                id: resp.authed_user.id,
                            },
                            bot: {
                                scopes: resp.scope.split(','),
                                token: resp.access_token,
                                userId: resp.bot_user_id,
                                id: botId,
                            },
                            tokenType: resp.token_type,
                        };
                        if (resp.enterprise !== null) {
                            installation.enterprise = {
                                id: resp.enterprise.id,
                                name: resp.enterprise.name,
                            };
                        }
                        _a.label = 8;
                    case 8:
                        if (resp.incoming_webhook !== undefined) {
                            installation.incomingWebhook = {
                                url: resp.incoming_webhook.url,
                                channel: resp.incoming_webhook.channel,
                                channelId: resp.incoming_webhook.channel_id,
                                configurationUrl: resp.incoming_webhook.configuration_url,
                            };
                        }
                        // save access code to installationStore
                        return [4 /*yield*/, this.installationStore.storeInstallation(installation, this.logger)];
                    case 9:
                        // save access code to installationStore
                        _a.sent();
                        if (options !== undefined && options.success !== undefined) {
                            this.logger.debug('calling passed in options.success');
                            options.success(installation, installOptions, req, res);
                        }
                        else {
                            this.logger.debug('run built-in success function');
                            callbackSuccess(installation, installOptions, req, res);
                        }
                        return [3 /*break*/, 11];
                    case 10:
                        error_2 = _a.sent();
                        this.logger.error(error_2);
                        if (options !== undefined && options.failure !== undefined) {
                            this.logger.debug('calling passed in options.failure');
                            options.failure(error_2, installOptions, req, res);
                        }
                        else {
                            this.logger.debug('run built-in failure function');
                            callbackFailure(error_2, installOptions, req, res);
                        }
                        return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    return InstallProvider;
}());
exports.InstallProvider = InstallProvider;
// default implementation of StateStore
var ClearStateStore = /** @class */ (function () {
    function ClearStateStore(stateSecret) {
        this.stateSecret = stateSecret;
    }
    ClearStateStore.prototype.generateStateParam = function (installOptions, now) {
        return __awaiter(this, void 0, void 0, function () {
            var state;
            return __generator(this, function (_a) {
                state = jsonwebtoken_1.sign({ installOptions: installOptions, now: now.toJSON() }, this.stateSecret);
                return [2 /*return*/, state];
            });
        });
    };
    ClearStateStore.prototype.verifyStateParam = function (_now, state) {
        return __awaiter(this, void 0, void 0, function () {
            var decoded;
            return __generator(this, function (_a) {
                decoded = jsonwebtoken_1.verify(state, this.stateSecret);
                // return installOptions
                return [2 /*return*/, decoded.installOptions];
            });
        });
    };
    return ClearStateStore;
}());
// Default Install Store. Should only be used for development
var MemoryInstallationStore = /** @class */ (function () {
    function MemoryInstallationStore() {
        this.devDB = {};
    }
    MemoryInstallationStore.prototype.storeInstallation = function (installation, logger) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (logger !== undefined) {
                    logger.warn('Storing Access Token. Please use a real Installation Store for production!');
                }
                // db write
                this.devDB[installation.team.id] = installation;
                return [2 /*return*/];
            });
        });
    };
    MemoryInstallationStore.prototype.fetchInstallation = function (query, logger) {
        return __awaiter(this, void 0, void 0, function () {
            var item;
            return __generator(this, function (_a) {
                if (logger !== undefined) {
                    logger.warn('Retrieving Access Token from DB. Please use a real Installation Store for production!');
                }
                item = this.devDB[query.teamId];
                return [2 /*return*/, item];
            });
        });
    };
    return MemoryInstallationStore;
}());
// Default function to call when OAuth flow is successful
function callbackSuccess(installation, _options, _req, res) {
    var redirectUrl;
    if (installation.team !== null && installation.team.id !== undefined && installation.appId !== undefined) {
        // redirect back to Slack native app
        // Changes to the workspace app was installed to, to the app home
        redirectUrl = "slack://app?team=" + installation.team.id + "&id=" + installation.appId;
    }
    else {
        // redirect back to Slack native app
        // does not change the workspace the slack client was last in
        redirectUrl = 'slack://open';
    }
    var htmlResponse = "<html>\n  <meta http-equiv=\"refresh\" content=\"0; URL=" + redirectUrl + "\">\n  <body>\n    <h1>Success! Redirecting to the Slack App...</h1>\n    <button onClick=\"window.location = '" + redirectUrl + "'\">Click here to redirect</button>\n  </body></html>";
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(htmlResponse);
}
// Default function to call when OAuth flow is unsuccessful
function callbackFailure(_error, _options, _req, res) {
    res.writeHead(500, { 'Content-Type': 'text/html' });
    res.end('<html><body><h1>Oops, Something Went Wrong! Please Try Again or Contact the App Owner</h1></body></html>');
}
// Gets the bot_id using the `auth.test` method.
function getBotId(token, clientOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var client, authResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = new web_api_1.WebClient(token, clientOptions);
                    return [4 /*yield*/, client.auth.test()];
                case 1:
                    authResult = _a.sent();
                    if (authResult.bot_id !== undefined) {
                        return [2 /*return*/, authResult.bot_id];
                    }
                    // If a user token was used for auth.test, there is no bot_id
                    // return an empty string in this case
                    return [2 /*return*/, ''];
            }
        });
    });
}
var logger_2 = require("./logger");
exports.LogLevel = logger_2.LogLevel;
//# sourceMappingURL=index.js.map